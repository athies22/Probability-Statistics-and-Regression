# create matrices
V0 <- matrix(x4)
V <- matrix(c(x1, x2, x3), nrow = 4, by.column = T)
# create factors of hat matrices, the name N is in reference to the normal equations
V0t <- t(V0)
N0 <- V0t %*% V0
N0inv <- solve(N0)
Vt <- t(V)
N <- Vt %*% V
Ninv <- solve(N)
# compute projection operators
PiV0 <- V0 %*% N0inv %*% V0t
PiV <- V %*% Ninv %*% Vt
PiV1 <- PiV - PiV0
# project y onto V0 and V
projY0 <- PiV0 %*% y
projY1 <- PiV1 %*% y
projY <- PiV %*% y
## D
# reset environment
rm(list=ls())
# create vectors
x1 <- c(1,1,1,1)
x2 <- c(1,1,0,0)
x3 <- c(1,1,1,0)
x4 <- (3*x3 - 2*x2)
y <- c(0,2,14,1)
# create matrices
V0 <- data.matrix(x4)
V <- data.matrix(c(x1, x2, x3), nrow = 4, ncol = 3)
# create factors of hat matrices, the name N is in reference to the normal equations
V0t <- t(V0)
N0 <- V0t %*% V0
N0inv <- solve(N0)
Vt <- t(V)
N <- Vt %*% V
Ninv <- solve(N)
# compute projection operators
PiV0 <- V0 %*% N0inv %*% V0t
PiV <- V %*% Ninv %*% Vt
PiV1 <- PiV - PiV0
# project y onto V0 and V
projY0 <- PiV0 %*% y
projY1 <- PiV1 %*% y
projY <- PiV %*% y
## D
# reset environment
rm(list=ls())
# create vectors
x1 <- c(1,1,1,1)
x2 <- c(1,1,0,0)
x3 <- c(1,1,1,0)
x4 <- (3*x3 - 2*x2)
y <- c(0,2,14,1)
# create matrices
V0 <- data.matrix(x4)
V <- data.matrix(c(x1, x2, x3), by.column = T)
# create factors of hat matrices, the name N is in reference to the normal equations
V0t <- t(V0)
N0 <- V0t %*% V0
N0inv <- solve(N0)
Vt <- t(V)
N <- Vt %*% V
Ninv <- solve(N)
# compute projection operators
PiV0 <- V0 %*% N0inv %*% V0t
PiV <- V %*% Ninv %*% Vt
PiV1 <- PiV - PiV0
# project y onto V0 and V
projY0 <- PiV0 %*% y
projY1 <- PiV1 %*% y
projY <- PiV %*% y
# D
# reset environment
rm(list=ls())
# create vectors
x1 <- c(1,1,1,1)
x2 <- c(1,1,0,0)
x3 <- c(1,1,1,0)
x4 <- (3*x3 - 2*x2)
y <- c(0,2,14,1)
# create matrices
V0 <- data.matrix(x4)
V <- data.matrix(c(x1, x2, x3))
# create factors of hat matrices, the name N is in reference to the normal equations
V0t <- t(V0)
N0 <- V0t %*% V0
N0inv <- solve(N0)
Vt <- t(V)
N <- Vt %*% V
Ninv <- solve(N)
# compute projection operators
PiV0 <- V0 %*% N0inv %*% V0t
PiV <- V %*% Ninv %*% Vt
PiV1 <- PiV - PiV0
# project y onto V0 and V
projY0 <- PiV0 %*% y
projY1 <- PiV1 %*% y
projY <- PiV %*% y
## D
# reset environment
rm(list=ls())
# create vectors
x1 <- c(1,1,1,1)
x2 <- c(1,1,0,0)
x3 <- c(1,1,1,0)
x4 <- (3*x3 - 2*x2)
y <- c(0,2,14,1)
# create matrices
V0 <- matrix(x4)
V <- matrix(c(x1, x2, x3), by.column = T)
# create factors of hat matrices, the name N is in reference to the normal equations
V0t <- t(V0)
N0 <- V0t %*% V0
N0inv <- solve(N0)
Vt <- t(V)
N <- Vt %*% V
Ninv <- solve(N)
# compute projection operators
PiV0 <- V0 %*% N0inv %*% V0t
PiV <- V %*% Ninv %*% Vt
PiV1 <- PiV - PiV0
# project y onto V0 and V
projY0 <- PiV0 %*% y
projY1 <- PiV1 %*% y
projY <- PiV %*% y
## D
# reset environment
rm(list=ls())
# create vectors
x1 <- c(1,1,1,1)
x2 <- c(1,1,0,0)
x3 <- c(1,1,1,0)
x4 <- (3*x3 - 2*x2)
y <- c(0,2,14,1)
# create matrices
V0 <- matrix(x4)
V <- matrix(c(x1, x2, x3), ncol = 3, by.column = T)
# create factors of hat matrices, the name N is in reference to the normal equations
V0t <- t(V0)
N0 <- V0t %*% V0
N0inv <- solve(N0)
Vt <- t(V)
N <- Vt %*% V
Ninv <- solve(N)
# compute projection operators
PiV0 <- V0 %*% N0inv %*% V0t
PiV <- V %*% Ninv %*% Vt
PiV1 <- PiV - PiV0
# project y onto V0 and V
projY0 <- PiV0 %*% y
projY1 <- PiV1 %*% y
projY <- PiV %*% y
## D
# reset environment
rm(list=ls())
# create vectors
x1 <- c(1,1,1,1)
x2 <- c(1,1,0,0)
x3 <- c(1,1,1,0)
x4 <- (3*x3 - 2*x2)
y <- c(0,2,14,1)
# create matrices
V0 <- matrix(x4)
V <- matrix(c(x1, x2, x3), ncol = 3)
# create factors of hat matrices, the name N is in reference to the normal equations
V0t <- t(V0)
N0 <- V0t %*% V0
N0inv <- solve(N0)
Vt <- t(V)
N <- Vt %*% V
Ninv <- solve(N)
# compute projection operators
PiV0 <- V0 %*% N0inv %*% V0t
PiV <- V %*% Ninv %*% Vt
PiV1 <- PiV - PiV0
# project y onto V0 and V
projY0 <- PiV0 %*% y
projY1 <- PiV1 %*% y
projY <- PiV %*% y
# print results
print(projY0)
print(projY1)
print(projY)
View(PiV1)
## A
# reset environment
rm(list=ls())
# set seed
seed <- 38703
set.seed(seed)
# create random data
z <- rnorm(100)
e <- rnorm(100)
d <- rnorm(100)
g <- rnorm(100)
# run data through functions
y <- 10*z + e
x <- 8*z + d
yi <- (80/65)*x + g
# create model from which to make abline for plot 1
lsline1 <- lm(y~x)
summary(lsline1)
# do it again for plot 2
lsline2 <- lm(yi~x)
summary(lsline2)
# make the line and plot everything
plot(y~x, pch = 16)
abline(0.21392, 1.20955)
plot(yi~x, pch = 18)
abline(-0.04711, 1.22022)
## B
## reset environment
rm(list=ls())
## load the data
load(url("http://pages.uoregon.edu/dlevin/DATA/gala.R"))
## a
# create vectors
spec <- gala$Species
area <- gala$Area
elev <- gala$Elevation
near <- gala$Nearest
scruz <- gala$Scruz
adj <- gala$Adjacent
# create lm
gala.lm <- lm(spec~area+elev+near+scruz+adj, data = gala)
summary(gala.lm)
## c
# make the design matrix
X <- data.matrix(gala[3:7])
gala.design <- cbind(rep(1,30),X)
# make the y vector
y <- gala[,1]
y <- data.matrix(y)
# make matrix from the normal equations
gala.designT <- t(gala.design)
N.gala <- (gala.designT %*% gala.design)
N.galainv <- solve(N.gala)
# compute and print b
b <- N.galainv %*% gala.designT %*% y
print(b)
## B
## reset environment
rm(list=ls())
## load the data
load(url("http://pages.uoregon.edu/dlevin/DATA/gala.R"))
## a
# create vectors
spec <- gala$Species
area <- gala$Area
elev <- gala$Elevation
near <- gala$Nearest
scruz <- gala$Scruz
adj <- gala$Adjacent
# create lm
gala.lm <- lm(spec~area+elev+near+scruz+adj, data = gala)
summary(gala.lm)
## b
# create yhat and e
yhat <- fitted(gala.lm)
e <- residuals(gala.lm)
# plot them
plot(e~yhat)
## c
# make the design matrix
X <- data.matrix(gala[3:7])
gala.design <- cbind(rep(1,30),X)
# make the y vector
y <- gala[,1]
y <- data.matrix(y)
# make matrix from the normal equations
gala.designT <- t(gala.design)
N.gala <- (gala.designT %*% gala.design)
N.galainv <- solve(N.gala)
# compute and print b
b <- N.galainv %*% gala.designT %*% y
print(b)
## B
## reset environment
rm(list=ls())
## load the data
load(url("http://pages.uoregon.edu/dlevin/DATA/gala.R"))
## a
# create vectors
spec <- gala$Species
area <- gala$Area
elev <- gala$Elevation
near <- gala$Nearest
scruz <- gala$Scruz
adj <- gala$Adjacent
# create lm
gala.lm <- lm(spec~area+elev+near+scruz+adj, data = gala)
summary(gala.lm)
## b
# create yhat and e
yhat <- fitted(gala.lm)
e <- residuals(gala.lm)
# plot them
plot(e~yhat, pch = 16)
## c
# make the design matrix
X <- data.matrix(gala[3:7])
gala.design <- cbind(rep(1,30),X)
# make the y vector
y <- gala[,1]
y <- data.matrix(y)
# make matrix from the normal equations
gala.designT <- t(gala.design)
N.gala <- (gala.designT %*% gala.design)
N.galainv <- solve(N.gala)
# compute and print b
b <- N.galainv %*% gala.designT %*% y
print(b)
## C
# reset environment
rm(list=ls())
y <- c(2,6,7,8)
one <- c(1,1,1,1)
xstar <- c(-3/2, -1/2, 1/2, 3/2)
X <- data.matrix(c(one, xstar))
Xt <- t(X)
N <- Xt %*% X
Ninv <- solve(N)
PiX <- X %*% Ninv %*% Xt
Projy <- PiX %*% y
## C
# reset environment
rm(list=ls())
y <- data.matrix(c(2,6,7,8))
one <- c(1,1,1,1)
xstar <- c(-3/2, -1/2, 1/2, 3/2)
X <- data.matrix(c(one, xstar))
Xt <- t(X)
N <- Xt %*% X
Ninv <- solve(N)
PiX <- X %*% Ninv %*% Xt
Projy <- PiX %*% y
PiX
Ninv
X
## C
# reset environment
rm(list=ls())
y <- data.matrix(c(2,6,7,8))
one <- c(1,1,1,1)
xstar <- c(-3/2, -1/2, 1/2, 3/2)
X <- data.matrix(c(one, xstar), ncol = 2)
Xt <- t(X)
N <- Xt %*% X
Ninv <- solve(N)
PiX <- X %*% Ninv %*% Xt
Projy <- PiX %*% y
## C
# reset environment
rm(list=ls())
y <- matrix(c(2,6,7,8))
one <- c(1,1,1,1)
xstar <- c(-3/2, -1/2, 1/2, 3/2)
X <- matrix(c(one, xstar), ncol = 2)
Xt <- t(X)
N <- Xt %*% X
Ninv <- solve(N)
PiX <- X %*% Ninv %*% Xt
Projy <- PiX %*% y
Projy
rm(list = ls())
X <- read.csv(file = '../data/smsa.txt', sep = " ", header = TRUE)
rm(list = ls())
set.seed(3346)
X <- read.table('data/smsa.txt', header = TRUE, sep = "\t", row.names = 1)
X <- read.table('../data/smsa.txt', header = TRUE, sep = "\t", row.names = 1)
X <- read.table('~/Documents/School/2.UO/16.03-Spring/MATH463/Homework/hw3/data/smsa.txt', header = TRUE, sep = "\t", row.names = 1)
View(X)
X.climate <- subset(X, select = climateVars)
climateVars <- c('JanTemp', 'JulyTemp', 'RelHum', 'Rain', 'HCPot', 'SO2Pot', 'NOx')
popVars <- c('Mortality', 'Education', 'PopDensity', '%NonWhite', '%WC', 'pop', 'pop/house', 'income')
X.climate <- subset(X, select = climateVars)
X.climate <- subset(X, , select = climateVars)
climateVars <- c('JanTemp', 'JulyTemp', 'RelHum', 'Rain', 'HCPot', 'S02Pot', 'NOx')
popVars <- c('Mortality', 'Education', 'PopDensity', '%NonWhite', '%WC', 'pop', 'pop/house', 'income')
X.climate <- subset(X, , select = climateVars)
View(X.climate)
X <- subset(X, , select = (climateVars + popVars))
X <- subset(X, , select = climateVars, popVars)
notNOxPot <- c(climateVars, popVars)
X <- subset(X, , select = notNOxPot)
climateVars <- c('JanTemp', 'JulyTemp', 'RelHum', 'Rain', 'HCPot', 'S02Pot', 'NOx')
popVars <- c('Mortality', 'Education', 'PopDensity', '%NonWhite', '%WC', 'pop', 'pop/house', 'income')
notNOxPot <- c(climateVars, popVars)
X <- subset(X, , select = notNOxPot)
rm(list = ls())
set.seed(3346)
X <- read.table('~/Documents/School/2.UO/16.03-Spring/MATH463/Homework/hw3/data/smsa.txt', header = TRUE, sep = "\t", row.names = 1)
climateVars <- c('JanTemp', 'JulyTemp', 'RelHum', 'Rain', 'HCPot', 'S02Pot', 'NOx')
popVars <- c('Mortality', 'Education', 'PopDensity', '%NonWhite', '%WC', 'pop', 'pop/house', 'income')
X <- subset(X, , select = c(climateVars, popVars))
X.climate <- subset(X, , select = climateVars)
popVars <- c('Mortality', 'Education', 'PopDensity', 'X.NonWhite', 'X.WC', 'pop', 'pop.house', 'income')
X <- subset(X, , select = c(climateVars, popVars))
X.climate <- subset(X, , select = climateVars)
View(X)
f1 <- lm(X$Mortality ~ ., data = X)
f2 <- lm(X$Mortality ~ X$climateVars)
f2 <- lm(X$Mortality ~ X$JanTemp + X$JulyTemp + X$RelHum + X$Rain + X$HCPot + X$S02Pot + X$NOx, data = X)
anova(f2,f1)
f1 <- lm(X$Mortality~., data = X)
f2 <- lm(X$Mortality~X$JanTemp + X$JulyTemp + X$RelHum + X$Rain + X$HCPot + X$S02Pot + X$NOx, data = X)
anova(f2,f1)
# Homework 3
# Alex Thies
# Math 463; Spring 2017
# Professor David Levin
# clear environment & set seed
rm(list = ls())
set.seed(3346)
# load data, note the sep tag means tab delimited
X <- read.table('~/Documents/School/2.UO/16.03-Spring/MATH463/Homework/hw3/data/smsa.txt', header = TRUE, sep = "\t", row.names = 1)
# Use web url for final submission X <- read.table('http://pages.uoregon.edu/dlevin/DATA/smsa.txt', header = TRUE, sep = "\t", row.names = 1)
# make some housekeeping objects
climateVars <- c('JanTemp', 'JulyTemp', 'RelHum', 'Rain', 'HCPot', 'S02Pot', 'NOx')
popVars <- c('Mortality', 'Education', 'PopDensity', 'X.NonWhite', 'X.WC', 'pop', 'pop.house', 'income')
# make design matrix without NOxPot, because NOxPot is dependent on NOx, and thus doesn't belong in a basis which also contains NOx
X <- subset(X, , select = c(climateVars, popVars))
# make small design matrix of just climate variables
X.climate <- subset(X, , select = climateVars)
f1 <- lm(X$Mortality~., data = X)
f2 <- lm(X$Mortality~X$JanTemp + X$JulyTemp + X$RelHum + X$Rain + X$HCPot + X$S02Pot + X$NOx, data = X)
anova(f2,f1)
install.packages("xtable")
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("foreign", "Matrix"))
xtable(anova((f2,f1)))
xtable(anova(f2,f1))
View(X)
row.names(X)
X.indy <- subset(X, row.names(x) = "Indianapolis, IN",)
X.indy <- subset(X, row.names(x) == "Indianapolis, IN",)
X.indy <- subset(X, row.names(X) == 'Indianapolis, IN',)
View(X.indy)
f3 <- lm(X.indy$Mortality~., data = X.indy)
predict(f3, interval = "confidence")
summary(f3)
View(X.indy)
X.indy <- subset(X, row.names(X) == 'Indianapolis, IN',)
X.indy <- cbind(1,X.indy)
f3 <- lm(X.indy$Mortality~., data = X.indy)
summary(f3)
summary(f1)
summary(f2)
summary(f1)
mean(X$Mortality)
mean(X$Mortality[1,])
mean(X$Mortality[,1])
mean(X$Mortality[1,1])
mean(X$Mortality)
predict(f1, interval = "confidence")
CI.indy <- subset(predict(f1, interval = "confidence"), row.names(predict(f1, interval = "confidence")) == 'Indianapolis, IN')
View(CI.indy)
summary(CI.indy)
CI.indy
xtable(CI.indy)
CI.NOX <- predict(f1, interval = 'confidence')
CI.NOX
CI.NOX <- predict(f1$coefficients[row.names(f1 == NOx)], interval = 'confidence')
CI.NOX <- predict(f1$coefficients[row.names(f1 == 'NOx')], interval = 'confidence')
bhat <- summary(f1$coefficients[,8])
bhat <- summary(f1$coefficients[8,])
bhat <- summary(f1$coefficients)
bhat
b <- 1.179
SE <- 0.9144
tstat <- 1.289
tstat <- b / SE
2*pt(tstat, 44)
# Homework 3
# Alex Thies
# Math 463; Spring 2017
# Professor David Levin
# Housekeeping
# clear environment & set seed
rm(list = ls())
set.seed(3346)
# load data, note the sep tag means tab delimited
# my url (offline-happy)
X <- read.table('~/Documents/School/2.UO/16.03-Spring/MATH463/Homework/hw3/data/smsa.txt', header = TRUE, sep = '\t', row.names = 1)
# web url
# X <- read.table('http://pages.uoregon.edu/dlevin/DATA/smsa.txt', header = TRUE, sep = '\t', row.names = 1)
# get rid of blank entries
X <- na.omit(X)
# make some housekeeping objects
climateVars <- c('JanTemp', 'JulyTemp', 'RelHum', 'Rain', 'HCPot', 'S02Pot', 'NOx')
popVars <- c('Mortality', 'Education', 'PopDensity', 'X.NonWhite', 'X.WC', 'pop', 'pop.house', 'income')
# make design matrix without NOxPot, because NOxPot is dependent on NOx, and thus doesn't belong in a basis which also contains NOx
X <- subset(X, , select = c(climateVars, popVars))
# Run an F-Test
# make large and small models
f1 <- lm(X$Mortality~., data = X)
f2 <- lm(X$Mortality~X$JanTemp + X$JulyTemp + X$RelHum + X$Rain + X$HCPot + X$S02Pot + X$NOx, data = X)
# call anova table and xtable for tex file
climateTestSum <- anova(f2,f1)
# xtable(climateTestSum)
# make a confidence interval for Mort_Indy
CI.indy <- subset(predict(f1, interval = 'confidence'), row.names(predict(f1, interval = 'confidence')) == 'Indianapolis, IN')
CI.indy
# xtable(CI.indy)
setwd("~/Documents/School/2.UO/16.03-Spring/MATH463/Homework/hw3/Rnw")
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("highr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("packrat")
library("packrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
